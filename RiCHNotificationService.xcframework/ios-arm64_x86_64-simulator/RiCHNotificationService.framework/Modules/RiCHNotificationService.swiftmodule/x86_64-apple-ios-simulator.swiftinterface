// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name RiCHNotificationService
import Foundation
@_exported import RiCHNotificationService
import Swift
import UIKit
import UserNotifications
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct RiCHNotificationExtensionHandler {
  public init()
  public func handleNotification(_ request: UserNotifications.UNNotificationRequest, contentHandler: @escaping (UserNotifications.UNMutableNotificationContent) -> Swift.Void)
}
public protocol Payloadable : Swift.Decodable, Swift.Encodable {
  func payload() -> Foundation.Data?
}
extension RiCHNotificationService.Payloadable {
  public func payload() -> Foundation.Data?
}
public struct NotificationData : Swift.Codable {
  public var text: Swift.String?, sender: Swift.String?
  public init(text: Swift.String? = nil, sender: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Response : Swift.Codable {
  public var data: RiCHNotificationService.NotificationData?
  public var id: Swift.String?
  public var isRead: Swift.Bool?
  public init(createdAt: Foundation.Date? = nil, data: RiCHNotificationService.NotificationData? = nil, errorCode: Swift.Int? = nil, errorMessage: Swift.String? = nil, id: Swift.String? = nil, isRead: Swift.Bool? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RegisterDeviceModel : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ErrorModel : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RiCHService {
  public typealias RiCHNotification = RiCHNotificationService.Response
  public init()
}
extension RiCHNotificationService.RiCHService {
  public func registerDevice(token: Swift.String, deviceID: Swift.String, imeI1: Swift.String, imeI2: Swift.String, mobileNumber: Swift.String, provider: RiCHNotificationService.PushProvider, _ completion: @escaping (Swift.Result<RiCHNotificationService.RegisterDeviceModel, any Swift.Error>) -> Swift.Void)
  public func fetchAllNotifications() -> [RiCHNotificationService.RiCHService.RiCHNotification]?
  public func fetchNotification(by id: Swift.String) -> RiCHNotificationService.RiCHService.RiCHNotification?
  public func logout()
  public func deleteAllNotifications()
  public func deleteNotification(with id: Swift.String)
  public func markNotificationAsRead(by id: Swift.String)
  public func write(_ item: RiCHNotificationService.Response)
}
public enum PushProvider : Swift.Int, Swift.Codable {
  case FCM
  case APNS
  case pushWoosh
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension RiCHNotificationService.PushProvider : Swift.Equatable {}
extension RiCHNotificationService.PushProvider : Swift.Hashable {}
extension RiCHNotificationService.PushProvider : Swift.RawRepresentable {}
